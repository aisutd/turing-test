'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const request = _bluebird2.default.promisify(require('request'));

const RESPONSE_KEYS = ['message', 'sessionid', 'logurl', 'vText8', 'vText7', 'vText6', 'vText5', 'vText4', 'vText3', 'vText2', 'prevref', '', 'emotionalhistory', 'ttsLocMP3', 'ttsLocTXT', 'ttsLocTXT3', 'ttsText', 'lineref', 'lineURL', 'linePOST', 'lineChoices', 'lineChoicesAbbrev', 'typingData', 'divert'];

const DEFAULT_PARAMS = {
  stimulus: '',
  start: 'y',
  sessionid: '',
  vText8: '',
  vText7: '',
  vText6: '',
  vText5: '',
  vText4: '',
  vText3: '',
  vText2: '',
  icognoid: 'wsf',
  icognocheck: '',
  fno: '0',
  prevref: '',
  emotionaloutput: '',
  emotionalhistory: '',
  asbotname: '',
  ttsvoice: '',
  typing: '',
  lineref: '',
  sub: 'Say',
  islearning: '1',
  cleanslate: 'false'
};

class Cleverbot {
  constructor() {
    this.params = _ramda2.default.clone(DEFAULT_PARAMS);
  }

  /**
   * Creates new instance of Cleverbot
   * @returns {Cleverbot}
  */
  static create() {
    return new Cleverbot();
  }

  _digest(body) {
    const hash = _crypto2.default.createHash('md5');
    hash.update(body);
    return hash.digest('hex');
  }

  _encodeParams(params) {
    return _ramda2.default.join('&', _ramda2.default.map(key => {
      const val = params[key];
      if (_ramda2.default.is(Array, val)) {
        return `${ key }=${ encodeURIComponent(val.join(',')) }`;
      } else if (_ramda2.default.is(Object, val)) {
        return this._encodeParams(val);
      }
      return `${ key }=${ encodeURIComponent(val) }`;
    }, _ramda2.default.keys(params)));
  }

  _createCookie() {
    return request('http://www.cleverbot.com').then(res => {
      if (!res.headers || !res.headers['set-cookie']) throw new Error('Cookie not set during response');

      this.cookies = {};
      _ramda2.default.forEach(cookies => {
        _ramda2.default.forEach(cookie => {
          cookie = cookie.split('=');
          this.cookies[cookie[0]] = cookie[1];
        }, cookies.split(';'));
      }, res.headers['set-cookie']);

      return this.cookies;
    });
  }

  /**
   * Returns current state (prefilled params and cookies)
   * @returns {Object}
  */
  getState() {
    return {
      cookies: this.cookies,
      params: this.params
    };
  }

  /**
   * Sets state to context
   * @param {Object} Contains `params` and `cookies` objects
   * @returns {Object}
  */
  setState(state) {
    this.cookies = state.cookies;
    this.params = state.parmas || _ramda2.default.clone(DEFAULT_PARAMS);
  }

  /**
   * Deletes state
  */
  deleteState() {
    delete this.cookies;
    this.params = _ramda2.default.clone(DEFAULT_PARAMS);
  }

  /**
   * Sends message to cleverbot. State can be passed optionally, as well as returning the new state along with the message
   * @param {String} Message to send to Cleverbot
   * @param {Object} Contains `params` and `cookies` objects
   * @param {Boolean} Set to true to return an object containing both the reply message and the state
   * @returns {Promise.<String|Object>}
  */
  sendMessage(message) {
    let state = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
    let return_state = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    if (!state) state = { cookies: this.cookies, params: this.params };
    if (!state.cookies) return this._createCookie().then(() => this.sendMessage.apply(this, arguments));

    const body = Object.assign({}, state.params, { stimulus: message });
    body.icognocheck = this._digest(this._encodeParams(body).substring(9, 35));
    const encoded_body = this._encodeParams(body);

    const params = {
      url: 'http://www.cleverbot.com/webservicemin?uc=165',
      method: 'POST',
      form: body,
      headers: {
        'Cache-Control': 'no-cache',
        'Content-Length': encoded_body.length,
        'Content-Type': 'application/x-www-form-urlencoded',
        Cookie: _ramda2.default.join(';', _ramda2.default.map(key => `${ key }=${ state.cookies[key] }`, _ramda2.default.keys(state.cookies)))
      }
    };

    return request(params).then(_ramda2.default.prop('body')).then(res => {
      const results = res.split('\r');
      _ramda2.default.addIndex(_ramda2.default.forEach)((val, idx) => {
        state.params[RESPONSE_KEYS[idx]] = val;
      }, results);

      this.params = state.params;

      if (return_state) return { message: results[0], state: state };
      return results[0];
    });
  }
}
exports.default = Cleverbot;